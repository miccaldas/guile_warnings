# TEMPLATE TO PRINT IN A LOOP THAT OUTPUTS AN ASCII TABLE. BEST WHEN YOU DON'T HAVE TO ADD ANYTHING TO THE LOOPED LINES.
    
    # THE EXAMPLE USES 'RECORDS' AS THE NAME OF LIST WITH DB QUERY RESULTS. IF DIFFERENT, CHANGE IT.
    # THE CODE WORKS UNDER THE ASSUMPTION THAT THE LIST YOU GOT FROM THE DB IS LIST OF TUPLES . IF DIFFERENT, CHANGE ACCORDINGLY.

    # USE AS MANY VALUES AS YOU'RE GETTING FROM RECORDS. YOU HAVE TO TURN THE ID VALUE TO STRING OR SUBSEQUENT CODE WILL FAIL.
    str_id_lst = [(str(id), <REST_OF_RECORDS_VALUES>) for <ENUMERATE_RECORDS_VALUES> in records]
    # The names of the variables that will be in the table.
    names = ["<LIST_OF_NAMES>"]
    # List with the length of the value strings.
    lns_tst = [
        (<LENGTHS_OF_EACH_ELEMENT_IN_STR_ID_LST>) for <EACH_ELEMENT_IN_STR_ID_LST> in str_id_lst
    ]
    # Turns a list of tuples to a list. Most of the following code was written on the
    # basis that 'test' and 'names' were pure lists. To conform to that expectation, we
    # change it from a list of tuples to list.
    lens_tst = [item for t in lns_tst for item in t]
    # List with the length of the variables.
    lens_nms = [len(nm) for nm in names]
    # We do the same that we did to the list of tuples with length values, to 'tst',
    # that is, also, a list of tuples.
    values_lst = [item for t in str_id_lst for item in t]
    # The next loop will ascertain from each of the last two lists, which element has the
    # bigger length. That way we know that the table cell of the respective line, will
    # have to have at, least, the width of its lengthier value. The loop compares each
    # result to a 'standard' one which, by convention, is the first one of each list.
    # The next two variables initiate those values.
    val_tst = lens_tst[0]
    val_nms = lens_nms[0]
    # Initiating lists needed for the loop. They'll collect the
    # the highest length value of each list.
    hi_ln_tst = []
    hi_ln_nms = []
    # This two are here because I was having an annoying 'unbound local error' error.
    # This was the simplest way of dealing with it.
    hi_len_tst = ""
    hi_len_nms = ""

    # The loop I talked about earlier. This one is specific to the collected variables lengths.
    for lt in lens_tst:
        if lt > val_tst:
            val_tst = lt
            hi_ln_tst.append(val_tst)
    # The loop should, but it doesn't, return just one value, it returns all values higher
    # than the first variable length. It returns str(), if it found just one value and return
    # list, if finds several values. If it's a list, we run the 'max' function.
    if len(hi_ln_tst) == 1:
        hi_len_tst = hi_ln_tst[0]
    if len(hi_ln_tst) > 1:
        hi_len_tst = max(hi_ln_tst)
    # This loop is the same as the last one, but now just for 'names'.
    for ln in lens_nms:
        if ln > val_nms:
            val_nms = ln
            hi_ln_nms.append(val_nms)
    if len(hi_ln_nms) == 1:
        hi_len_nms = hi_ln_nms[0]
    if len(hi_ln_nms) > 1:
        hi_len_nms = max(hi_ln_nms)

    # This variable measures the highest length of a line, by adding the highest len() values
    # in both lists plus 3, to account for the spaces+separator between name and value.
    vh = int(hi_len_tst + hi_len_nms + 3)
    # Variable of the character that'll be used to build the top and bottom table separators.
    sep = "-"
    # Creates a string, made of consecutive number of '-' characters, calculated by multiplying
    # by the 'vh' value.
    traces = "".join(sep * vh)
    # The border in ascii squares have '+' signs on their vertices and starts two pixels before
    # the cell content, and ends two pixels after their end. This variable adds to the start
    # and end of the separators, these characters:
    ntraces = f"+-{traces}-+"
    # The len() of ntraces'. It'll be needed further along.
    ud_len = len(ntraces)
    
    # Calls the user-generated default values for 'Tput'. These variables are brought from
    # 'configs/config.py'
    cnf = tput_config()

    title_str = "<TITLE_STRING>"
    title_width = int(
        cnf["init_width"] + (len(cnf["separator"]) / 2) - (len(f"{title_str}") / 2)
    )

    with open("res_update.bash", "w") as f:
        f.write("#!/usr/bin/env bash\n\n")
        f.write("tput clear\n\n")
        f.write(f"tput cup {cnf['init_height']} ")
        f.write(f"{title_width}\n")
        f.write(f"tput setaf {cnf['title_color']}\n")
        f.write("tput bold\n")
        f.write(f'echo "{title_str}"\n')
        f.write("tput sgr0\n\n")
        f.write(f"tput cup {cnf['separator_height']} {cnf['init_width']}\n")
        f.write(f"echo '{cnf['separator']}'\n")

        # This centers the table below the separator. All table elements will have this width.
        table_width = int(
            cnf["init_width"] + (len(cnf["separator"]) / 2) - (len(f"{ntraces}") / 2)
        )
        # The top seprator line isn't part of the ('name', 'value') list that'll be used to fill
        # the table, so we print it before the start of the loop.
        f.write(f"tput cup {cnf['separator_height'] + 3} {table_width}\n")
        f.write(f"echo '{ntraces}'\n")
        # We're using a range() value that starts at 1, so the loop count starts at the same value as
        # the length of the list we'll create inside the loop. As the list will start at 1, we print
        # what would've been its index[0] element, before the loop.
        first_item_height = int(cnf["separator_height"] + 4)
        lst_zip = list(zip(names, values_lst))
        rng_lst_zip = range(1, len(lst_zip))
        # Creates a list where its elements are the integers inside the range of lst_zip. Necessary
        # for subsequent list iterations.
        rng_lst = [int(r) for r in rng_lst_zip]
        # These are, specifically, dimensions for index[0] line.
        # The other dimensions are defined inside the loop.
        n_len0 = int(hi_len_nms - len(lst_zip[0][0]))
        t_len0 = int(hi_len_tst - len(lst_zip[0][1]))
        space_n0 = "".join(" " * n_len0)
        space_t0 = "".join(" " * t_len0)
        # Printing index[0]
        f.write(f"tput cup {first_item_height} {table_width}\n")
        f.write(f"echo '| {lst_zip[0][0]}{space_n0} | {lst_zip[0][1]}{space_t0} |'\n")
        # The loop, counting from lst_zip[1], starts here.
        for v in rng_lst:
            n_len = int(hi_len_nms - len(lst_zip[v][0]))
            t_len = int(hi_len_tst - len(lst_zip[v][1]))
            space_n = "".join(" " * n_len)
            space_t = "".join(" " * t_len)
            # We add to the height of last printed element, 'first_item_height', the value of 'v'.
            # Since the range is starting at 1, it puts the string one line below the other.
            f.write(f"tput cup {cnf['separator_height'] + v + 4} {table_width}\n")
            f.write(f"echo '| {lst_zip[v][0]}{space_n} | {lst_zip[v][1]}{space_t} |'\n")
        # As we want this element to be under the iterated list, we add 1 to its length, because len()
        # starts at 0, to that we add 1 again so it's one line under the end of loop lines. To this we
        # add another 2 lines, one for each element that is part of the table but outside the loop.
        # That is, the top seprator, and index[0].
        f.write(
            f"tput cup {cnf['separator_height'] + len(lst_zip) + 4} {table_width}\n"
        )
        f.write(f"echo '{ntraces}'\n")
        f.write(f"tput cup {cnf['space_under_separator']} {table_width}\n")
        f.write("read -p 'Press any key to exit. ' choice\n")
        f.write('echo "${choice}" > /dev/null\n')
        f.write("tput clear\n")
        f.write("tput sgr0\n")
        f.write("tput rc")
    subprocess.run("sudo chmod +x res_update.bash", cwd=os.getcwd(), shell=True)
    subprocess.run("./res_update.bash", cwd=os.getcwd(), shell=True)
